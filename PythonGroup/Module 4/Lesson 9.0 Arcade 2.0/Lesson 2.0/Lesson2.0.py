# Подключить нужные модули
from random import randint 
import pygame 
from os import path
pygame.init() 
# во время игры пишем надписи размера 72
 

# Глобальные переменные (настройки)


# цвета: 


# Классы
# класс для цели (стоит и ничего не делает)

  # конструктор класса
   
      # Вызываем конструктор класса (Sprite):
       

      # каждый спрайт должен хранить свойство image - изображение 

      # каждый спрайт должен хранить свойство rect - прямоугольник, в который он вписан 

#класс для главного героя  
class Hero(pygame.sprite.Sprite):
    def __init__(self, filename, x_speed=0, y_speed=0, x=x_start, y=y_start, width=120, height=120):
       pygame.sprite.Sprite.__init__(self)
       # the picture is loaded from a file and includes proteins of the required sizes:
       self.image = pygame.transform.scale(pygame.image.load(filename), (width, height)).convert_alpha()
                   # use convert_alpha, we need to keep transparency
       # each sprite must store a rect property - a rectangle. This property is needed to determine the touches of sprites.
       self.rect = self.image.get_rect()
       # put the character at the given point (x, y):
       self.rect.x = x
       self.rect.y = y
       # create properties, remember the passed values:
       self.x_speed = x_speed
       self.y_speed = y_speed
       # add the stands_on property - this is the platform on which the character stands
       self.stands_on = False # if none, then the value is False

    def gravity(self):
        self.y_speed+=0.25

    def jump(self,y):
        if self.stands_on:
            self.y_speed=y

   
 
        # картинка загружается из файла и умещается в прямоугольник нужных размеров:
         
                    # используем convert_alpha, нам надо сохранять прозрачность

        # каждый спрайт должен хранить свойство rect - прямоугольник. Это свойство нужно для определения касаний спрайтов. 
        
        # ставим персонажа в переданную точку (x, y):
         
        # создаем свойства, запоминаем переданные значения:
         
        # добавим свойство stands_on - это та платформа, на которой стоит персонаж
        
        # если ни на какой не стоит, то значение - False
    #функция для падения (гравитация)  


    #функция для прыжка

    #функция апдейт для данного спрайта. так как спрайт будет премещаться. Самая веселая часть ) 
     

#класс для стены. Делали точно такой же в проекте Лабиринт :))) 
    #конструктор

#класс врага 
    #конструктор 

    # функция апдейт с рандомным перемещением 


# Запуск игры 


# список всех персонажей игры:


# список препятствий:

# список врагов:

# список мин:


# создаем персонажа, добавляем его в список всех спрайтов:

# создаем стены, добавляем их:




# создаем врагов, добавляем их:


# создаем мины, добавляем их:
            
            # в список всех спрайтов бомбы не добавляем, будем рисовать их отдельной командой
            # так легко сможем подрывать бомбы, а также делаем их неподвижными, update() не вызывается

# создаем финальный спрайт, добавляем его: 

# Основной цикл игры: 
 
    # Обработка событий
      
        # Перемещение игровых объектов  

        # дальше проверки правил игры
        # проверяем касание с бомбами: 
                # если бомба коснулась спрайта, то она убирается из списка бомб, а спрайт - из all_sprites!

        # проверяем касание героя с врагами: 
           # robin.kill() # метод kill убирает спрайт из всех групп, в которых он числится

        # проверяем границы экрана: 
             # при выходе влево или вправо переносим изменение в сдвиг экрана 
            # перемещаем на общий сдвиг все спрайты (и отдельно бомбы, они ж в другом списке): 
                        # сам robin тоже в этом списке, поэтому его перемещение визуально отменится
            

        # Отрисовка
        # рисуем фон со сдвигом
        

        # нарисуем все спрайты на экранной поверхности до проверки на выигрыш/проигрыш
        # если в этой итерации цикла игра закончилась, то новый фон отрисуется поверх персонажей
         
        # группу бомб рисуем отдельно - так бомба, которая ушла из своей группы, автоматически перестанет быть видимой
       

        # проверка на выигрыш и на проигрыш:
        

        # проверка на проигрыш:
         
            # пишем текст на экране
             

     

    # Пауза 